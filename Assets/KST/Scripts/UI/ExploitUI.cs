using System;
using TMPro;
using UnityEngine;
using UnityEngine.UI;

public class ExploitUI : Singleton<ExploitUI>
{
    public GameObject UIGO;
    //오픈 관련 이벤트 처리
    public event Action<bool> OnIsUIOpen;
    //타일 타입
    [SerializeField] Tile m_selectedTile;
    // [SerializeField] ToolType m_selectedTool;
    //Detail
    [Header("Develop")]
    [SerializeField] private DevelopSO selectedDevelopSo;
    public DevelopSO[] DevelopList;
    [SerializeField] private ToolType m_needTooltype;

    //BTN
    [SerializeField] GameObject btn1; //개척 버튼
    [SerializeField] GameObject btn2;//경작지 버튼
    [SerializeField] GameObject btn3; //방어시설 버튼
    [SerializeField] GameObject btn4;//급수시설 버튼
    [SerializeField] GameObject[] BtnWrap; //2,3,4,버튼의 게임오브젝트


    [SerializeField] private TextMeshProUGUI textAreaName; // 영역 이름
    [SerializeField] private TextMeshProUGUI textDesc; // 설명
    [SerializeField] private TextMeshProUGUI requiredTime; // 소요 시간
    [SerializeField] private TextMeshProUGUI textStatus; // 프로그래스바 상태 텍스트

    //필요 아이템 목록
    [SerializeField] private GameObject requireBtnPrefab;
    [SerializeField] private Transform contentTransfrom; //필요아이템 목록 컨텐츠 위치


    //프로그래스바

    [SerializeField] private Image ProgressBarImg;
    private float pressDuration = 5f;

    private float pressTimer = 0f;
    private float developDuration = 5f; // 기본값, SelectDevelop에서 덮어씀
    private bool isPressingE = false;
    private float developTimer = 0f;
    public bool isDeveloping;


    private static bool m_isIneractionKeyPressed;
    private static bool m_isEscapeKeyPressed;

    void Update()
    {
        if (m_isEscapeKeyPressed && !m_isIneractionKeyPressed)
        {
            CloseUI();
            return;
        }

        if (selectedDevelopSo == null || m_selectedTile == null)
        return;

        // 개척 가능 상태
        if (m_selectedTile.tileState == TileState.Frontier)
        {
            // 개발 시작된 상태면 타이머 감소
            if (isDeveloping)
            {
                developTimer -= Time.deltaTime;
                textStatus.text = $"개척 진행 중... {Mathf.Ceil(developTimer)}초 남음";
                ProgressBarImg.color = Color.blue;
                ProgressBarImg.fillAmount = 1f;

                if (developTimer <= 0f)
                {
                    developTimer = 0f;
                    ProgressBarImg.color = Color.green;
                    textStatus.text = "개척 완료!";
                    m_selectedTile.isDeveloping = false;
                    DevelopTile(); // 상태 변경
                }
                return;
            }

            // 도구 조건 체크
            if (Interaction.Instance.CurrentTool != m_needTooltype)
            {
                textStatus.text = $"{m_needTooltype}을 장비해야 개척할 수 있습니다.";
                return;
            }

            //E 인터렉트 시작
            if (m_isIneractionKeyPressed)
            {
                isPressingE = true;
                pressTimer += Time.deltaTime;
                ProgressBarImg.fillAmount = pressTimer / pressDuration;
                textStatus.text = $"개척 준비 중... {pressDuration - pressTimer}초";

                if (pressTimer >= pressDuration)
                {
                    pressTimer = 0f;
                    isPressingE = false;
                    StartDeveloping();
                }
            }
            else if (pressTimer > 0f)
            {
                CancelPress();
            }
        }
    }

    //개척 버튼 클릭 시.
    public void SelectDevelop(DevelopSO so)
    {
        if (m_selectedTile != null)
        
        selectedDevelopSo = so;
        DisplayDetail(so);

        developDuration = so.DevelopTime;

        if (m_selectedTile != null)
        {
            textStatus.text = $"개척하기 [E]키를 {pressDuration}초 동안 눌러주세요. ";
            ProgressBarImg.fillAmount = 0f;
        }
    }

    //개척 타이머 시작
    void StartDeveloping()
    {
        isDeveloping = true;
        developTimer = selectedDevelopSo.DevelopTime;
        textStatus.text = $"개척 시작!";
        ProgressBarImg.fillAmount = 1f;
    }

    //실제 타일 변환 로직
    void DevelopTile()
    {
        m_selectedTile.TileStateChange(Interaction.Instance.CurrentTool);
        RefreshUI();
    }

    //프레스
    void CancelPress()
    {
        pressTimer = 0f;
        isPressingE = false;
        ProgressBarImg.fillAmount = 0f;
        textStatus.text = $"개척하려면 [E]키를 {pressDuration}초 동안 눌러주세요.";
    }

    public void DisplayDetail(DevelopSO data)
    {

        textDesc.text = data.DevelopDesc;
        requiredTime.text = $"{data.DevelopTime}";

        // 기존에 있던 RequireItem 오브젝트 제거
        foreach (Transform child in contentTransfrom)
        {
            Destroy(child.gameObject);
        }

        // 필요한 재료 수만큼 프리팹 생성
        for (int i = 0; i < data.RequireName.Length; i++)
        {
            GameObject go = Instantiate(requireBtnPrefab, contentTransfrom);
            RequireItem itemUI = go.GetComponent<RequireItem>();

            if (itemUI != null)
            {
                itemUI.Set(data.RequireImg[i], data.RequireName[i]);
            }
        }
    }

    //개척 버튼 상태(개척 했을 때는 게임 오브젝트 활성화 여부)
    void BtnState(TileState tileState)
    {
        btn1.SetActive(tileState == TileState.None);

        bool isFrontier = tileState == TileState.Frontier;
        foreach (var go in BtnWrap)
            go.SetActive(isFrontier);

    }
    //이벤트
    void OnTileStateChanged()
    {
        RefreshUI();
    }

    void RefreshUI()
    {
        //UI 세팅
        if (textAreaName != null)
            textAreaName.text = $"{m_selectedTile.tileState}";
        if (requiredTime != null)
            //TODO<김승태>: 소요시간 추가 필요
            requiredTime.text = "5초";
        Debug.Log("개척 UI open");

        //타일 상태에 따라 버튼 활성화 다르도록.
        BtnState(m_selectedTile.tileState);
    }
    #region 각 버튼 클릭 리스터

    public void OnClickExploit()
    {
        //TODO<김승태>: 기본 개척도 시간 소요되도록 설정하기.
        if (m_selectedTile == null) return;

        if (m_selectedTile.tileState == TileState.None && Interaction.Instance.CurrentTool == ToolType.Pick)
        {
            m_selectedTile.TileStateChange(Interaction.Instance.CurrentTool);
        }
    }

    public void OnClickFarmable()
    {
        SelectDevelop(DevelopList[0]);
        m_needTooltype = ToolType.Shovel;
        // if (m_selectedTile.tileState == TileState.Frontier && Interaction.Instance.CurrentTool == ToolType.Shovel)
        //     m_selectedTile.TileStateChange(ToolType.Shovel);
    }

    public void OnClickDefence()
    {
        SelectDevelop(DevelopList[1]);
        m_needTooltype = ToolType.Hammer;
        // if (m_selectedTile.tileState == TileState.Frontier && Interaction.Instance.CurrentTool == ToolType.Hammer)
        //     m_selectedTile.TileStateChange(ToolType.Hammer);
    }

    public void OnClickWater()
    {
        SelectDevelop(DevelopList[2]);
        m_needTooltype = ToolType.Water;

        // if (m_selectedTile.tileState == TileState.Frontier && Interaction.Instance.CurrentTool == ToolType.Water)
        //     m_selectedTile.TileStateChange(ToolType.Water);
    }
    #endregion


    //개척 UI
    #region UI Open/Close
    public void OpenUI(Tile tile, ToolType toolType)
    {
        if (m_selectedTile != null)
            m_selectedTile.OnTileStateChanged -= OnTileStateChanged;
        m_selectedTile = tile;
        Interaction.Instance.CurrentTool = toolType;

        m_selectedTile.OnTileStateChanged += OnTileStateChanged;

        RefreshUI();
        // //UI 세팅
        // if (textAreaName != null)
        //     textAreaName.text = $"{tile.tileState}";
        // if (requiredTime != null)
        //     //TODO<김승태>: 소요시간 추가 필요
        //     requiredTime.text = "5초";
        // Debug.Log("개척 UI open");

        // //타일 상태에 따라 버튼 활성화 다르도록.
        // BtnState(tile.tileState);

        UIGO.SetActive(true);
        GameManager.Instance.SetCursorUnlock();

        OnIsUIOpen?.Invoke(true);
    }
    public void CloseUI()
    {
        if (m_selectedTile != null)
            m_selectedTile.OnTileStateChanged -= OnTileStateChanged;


        UIGO.SetActive(false);
        m_selectedTile = null;
        // m_selectedTool = ToolType.None;

        OnIsUIOpen?.Invoke(false);
        m_isEscapeKeyPressed = false;
        GameManager.Instance.SetCursorLock();
        
    }
    #endregion
    
    public static void OnInteractionKeyPressed() => m_isIneractionKeyPressed = true;
    public static void OnInteractionKeyReleased() => m_isIneractionKeyPressed = false;
    public static void OnCloseKeyPressed() => m_isEscapeKeyPressed = true;
}