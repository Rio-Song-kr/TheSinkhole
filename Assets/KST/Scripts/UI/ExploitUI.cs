using System;
using TMPro;
using UnityEngine;
using UnityEngine.UI;
using Util;
public class ExploitUI : Singleton<ExploitUI>
{
    public GameObject UIGO;

    //오픈 관련 이벤트 처리
    public bool IsOpen => UIGO.activeSelf;
    public event Action<bool> OnIsUIOpen;
    //타일 타입
    [SerializeField] Tile m_selectedTile;
    //Detail
    [Header("Develop")]
    [SerializeField] private DevelopSO selectedDevelopSo;
    public DevelopSO[] DevelopList;
    [SerializeField] private ToolType m_needTooltype;

    //BTN
    [SerializeField] GameObject btn1; //개척 버튼
    [SerializeField] GameObject btn2;//경작지 버튼
    [SerializeField] GameObject btn3; //방어시설 버튼
    [SerializeField] GameObject btn4;//급수시설 버튼
    [SerializeField] GameObject[] BtnWrap; //2,3,4,버튼의 게임오브젝트


    [SerializeField] private TextMeshProUGUI textAreaName; // 영역 이름
    [SerializeField] private TextMeshProUGUI textDesc; // 설명
    [SerializeField] private TextMeshProUGUI requiredTime; // 소요 시간
    [SerializeField] private TextMeshProUGUI textStatus; // 프로그래스바 상태 텍스트

    //필요 아이템 목록
    [SerializeField] private GameObject requireBtnPrefab;
    [SerializeField] private Transform contentTransfrom; //필요아이템 목록 컨텐츠 위치


    //프로그래스바

    [SerializeField] private Image ProgressBarImg;
    private float pressDuration = 5f;

    private float pressTimer = 0f;
    private float developDuration = 5f; // 기본값, SelectDevelop에서 덮어씀
    private bool isPressingE = false;
    private static bool m_isIneractionKeyPressed;
    private static bool m_isEscapeKeyPressed;

    //인벤토리
    [SerializeField] private Inventory playerInven;

    void Start()
    {
        UIGO.SetActive(false);
    }

    void Update()
    {
        if (m_isEscapeKeyPressed && !m_isIneractionKeyPressed)
        {
            CloseUI();
            return;
        }
        if (!GameTimer.IsDay)
        {
            if (m_selectedTile != null && m_selectedTile.isDeveloping)
            {
                DevelopingProgress();
            }
            else if (pressTimer > 0f)
            {
                CancelPress();
            }
            if (m_isIneractionKeyPressed)
            {
                GameManager.Instance.UI.Popup.DisplayPopupView(PopupType.CantExploit);
            }
            return;
        }

        if (selectedDevelopSo == null || m_selectedTile == null)
            return;
        if (m_selectedTile.isDeveloping)
        {
            DevelopingProgress();
            return;
        }

        if (Interaction.Instance.CurrentTool != m_needTooltype && !m_selectedTile.isDeveloping)
        {
            if (isPressingE || pressTimer > 0f) CancelPress();
            textStatus.text = $"{m_needTooltype}을 장비해야 개척할 수 있습니다.";
            return;
        }

        if (m_isIneractionKeyPressed)
        {
            if (!HasRequiredItems())
            {
                textStatus.text = "재료 아이템이 부족합니다.";
                return;
            }

            isPressingE = true;
            pressTimer += Time.deltaTime;
            ProgressBarImg.fillAmount = pressTimer / pressDuration;
            textStatus.text = $"개척 준비 중... {FormatingTime.FormatSecTime(pressDuration - pressTimer)}초";

            if (pressTimer >= pressDuration)
            {
                pressTimer = 0f;
                isPressingE = false;
                ToolType tool = Interaction.Instance.CurrentTool;

                if (!GameTimer.IsDay) return; // 낮이 아닐 경우

                foreach (var req in selectedDevelopSo.RequireItems)
                {
                    if (req.ItemName == ItemEnName.None) continue;

                    bool result = playerInven.RemoveItemAmounts(req.ItemName, req.RequireCount);
                    if (!result)
                    {
                        textStatus.text = "아이템 소모 실패";
                        return;
                    }
                }

                //선택된 개척 타입에 맞게 개척 진행
                Tile targetTile = m_selectedTile;
                targetTile.SetDevelopSO(selectedDevelopSo);

                targetTile.StartDevelop(selectedDevelopSo.DevelopTime, () =>
                {
                    targetTile.TileStateChange(tool);
                    if (targetTile == m_selectedTile)
                        RefreshUI();
                });
            }
        }
        else if (pressTimer > 0f)
        {
            CancelPress();
        }
    }
    private void DevelopingProgress()
    {
        float remain = m_selectedTile.GetRemainingDevelopTime();
        ProgressBarImg.fillAmount = 1f;
        if (remain > 0)
        {
            textStatus.text = $"{selectedDevelopSo.DevelopName}로 개척 진행 중... {FormatingTime.FormatSecTime(remain)}초 남음";
            ProgressBarImg.color = ColorUtil.Hexcode("#87B5F2", Color.blue);
        }
        else
        {
            textStatus.text = "개척 완료!";
            ProgressBarImg.color = ColorUtil.Hexcode("#87F293", Color.green);
        }
    }

    //재료 아이템 체크
    private bool HasRequiredItems()
    {
        foreach (var req in selectedDevelopSo.RequireItems)
        {
            if (req.ItemName == ItemEnName.None) continue;

            int currentCount = playerInven.GetItemAmounts(req.ItemName);
            if (currentCount < req.RequireCount) return false;
        }
        return true;
    }

    //개척 버튼 클릭 시.
    public void SelectDevelop(DevelopSO so)
    {
        selectedDevelopSo = so;
        developDuration = so.DevelopTime;
        isPressingE = false;
        pressTimer = 0f;
        ProgressBarImg.fillAmount = 0f;
        DisplayDetail(so);
        if (m_selectedTile != null)
            textStatus.text = $"개척하려면 [E]키를 {pressDuration}초 동안 눌러주세요.";
    }

    //프레스
    void CancelPress()
    {
        Debug.Log("취소");
        pressTimer = 0f;
        isPressingE = false;
        ProgressBarImg.fillAmount = 0f;
        textStatus.text = $"개척하려면 [E]키를 {pressDuration}초 동안 눌러주세요.";
    }

    public void DisplayDetail(DevelopSO data)
    {

        textDesc.text = data.DevelopDesc;
        requiredTime.text = $"{data.DevelopTime}";

        // 기존에 있던 RequireItem 오브젝트 제거
        foreach (Transform child in contentTransfrom)
        {
            Destroy(child.gameObject);
        }
        foreach (var req in data.RequireItems)
        {
            if (req.ItemName == ItemEnName.None) continue;

            var go = Instantiate(requireBtnPrefab, contentTransfrom);
            var ItemUI = go.GetComponent<RequireItem>();

            int currentAmount = playerInven.GetItemAmounts(req.ItemName);

            if (GameManager.Instance.Item.ItemEnDataSO.TryGetValue(req.ItemName, out var item))
            {
                ItemUI.Set(item.Icon, item.ItemData.ItemName, req.RequireCount, currentAmount);
            }

        }
    }

    //개척 버튼 상태(개척 했을 때 게임 오브젝트 활성화 여부)
    void BtnState(TileState tileState)
    {
        btn1.SetActive(tileState == TileState.PlainTile);

        bool isFrontier = tileState == TileState.Frontier;
        foreach (var go in BtnWrap)
        {
            go.SetActive(isFrontier);
            var btn = go.GetComponent<Button>();
            if (btn != null)
                btn.interactable = !m_selectedTile.isDeveloping;
        }
    }

    //이벤트
    void OnTileStateChanged()
    {
        RefreshUI();
    }

    void RefreshUI()
    {
        //UI 세팅
        if (textAreaName != null)
            textAreaName.text = $"{m_selectedTile.tileState}";
        if (requiredTime != null)
            //TODO<김승태>: 소요시간 추가 필요
            requiredTime.text = "5초";
        Debug.Log("개척 UI open");

        //타일 상태에 따라 버튼 활성화 다르도록.
        BtnState(m_selectedTile.tileState);
    }
    #region 각 버튼 클릭 리스터

    public void OnClickExploit()
    {
        if (m_selectedTile == null) return;
        m_needTooltype = ToolType.Pick;
        SelectDevelop(DevelopList[3]);

        // if (m_selectedTile.tileState == TileState.PlainTile && Interaction.Instance.CurrentTool == ToolType.Pick)
        // {
        //     m_selectedTile.TileStateChange(Interaction.Instance.CurrentTool);
        // }
    }

    public void OnClickFarmable()
    {
        if (m_selectedTile == null) return;
        m_needTooltype = ToolType.Shovel;
        SelectDevelop(DevelopList[0]);
        ProgressBarImg.color = ColorUtil.Hexcode("#F28787", Color.red);
    }

    public void OnClickDefence()
    {
        if (m_selectedTile == null) return;
        m_needTooltype = ToolType.Hammer;
        SelectDevelop(DevelopList[1]);
        ProgressBarImg.color = ColorUtil.Hexcode("#F28787", Color.red);
    }

    public void OnClickWater()
    {
        if (m_selectedTile == null) return;
        m_needTooltype = ToolType.Water;
        SelectDevelop(DevelopList[2]);
        ProgressBarImg.color = ColorUtil.Hexcode("#F28787", Color.red);
    }
    #endregion


    //개척 UI
    #region UI Open/Close
    public void OpenUI(Tile tile, ToolType toolType)
    {
        if (!GameTimer.IsDay) return;

        if (m_selectedTile != null)
            m_selectedTile.OnTileStateChanged -= OnTileStateChanged;
        m_selectedTile = tile;
        Interaction.Instance.CurrentTool = toolType;

        m_selectedTile.OnTileStateChanged += OnTileStateChanged;

        //초기화
        // isPressingE = false;
        pressTimer = 0f;
        ProgressBarImg.fillAmount = 0f;
        ProgressBarImg.color = ColorUtil.Hexcode("#F28787", Color.red);
        textStatus.text = "";

        if (m_selectedTile.isDeveloping)
        {
            selectedDevelopSo = m_selectedTile.developSO;
            DisplayDetail(m_selectedTile.developSO);
        }
        else
        {
            selectedDevelopSo = null;
        }

        RefreshUI();
        UIGO.SetActive(true);
        GameManager.Instance.SetCursorUnlock();

        OnIsUIOpen?.Invoke(true);
    }
    public void CloseUI()
    {
        if (m_selectedTile != null)
            m_selectedTile.OnTileStateChanged -= OnTileStateChanged;


        UIGO.SetActive(false);
        OnIsUIOpen?.Invoke(false);
        m_isEscapeKeyPressed = false;
        GameManager.Instance.SetCursorLock();

    }
    #endregion

    public static void OnInteractionKeyPressed() => m_isIneractionKeyPressed = true;
    public static void OnInteractionKeyReleased() => m_isIneractionKeyPressed = false;
    public static void OnCloseKeyPressed() => m_isEscapeKeyPressed = true;
}